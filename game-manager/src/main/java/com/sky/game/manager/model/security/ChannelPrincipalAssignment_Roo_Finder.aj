// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sky.game.manager.model.security;

import com.sky.game.manager.model.security.ChannelPrincipalAssignment;
import com.sky.game.manager.model.security.Principal;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ChannelPrincipalAssignment_Roo_Finder {
    
    public static Long ChannelPrincipalAssignment.countFindChannelPrincipalAssignmentsByPrinciple(Principal principle) {
        if (principle == null) throw new IllegalArgumentException("The principle argument is required");
        EntityManager em = ChannelPrincipalAssignment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ChannelPrincipalAssignment AS o WHERE o.principle = :principle", Long.class);
        q.setParameter("principle", principle);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ChannelPrincipalAssignment> ChannelPrincipalAssignment.findChannelPrincipalAssignmentsByPrinciple(Principal principle) {
        if (principle == null) throw new IllegalArgumentException("The principle argument is required");
        EntityManager em = ChannelPrincipalAssignment.entityManager();
        TypedQuery<ChannelPrincipalAssignment> q = em.createQuery("SELECT o FROM ChannelPrincipalAssignment AS o WHERE o.principle = :principle", ChannelPrincipalAssignment.class);
        q.setParameter("principle", principle);
        return q;
    }
    
    public static TypedQuery<ChannelPrincipalAssignment> ChannelPrincipalAssignment.findChannelPrincipalAssignmentsByPrinciple(Principal principle, String sortFieldName, String sortOrder) {
        if (principle == null) throw new IllegalArgumentException("The principle argument is required");
        EntityManager em = ChannelPrincipalAssignment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ChannelPrincipalAssignment AS o WHERE o.principle = :principle");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ChannelPrincipalAssignment> q = em.createQuery(queryBuilder.toString(), ChannelPrincipalAssignment.class);
        q.setParameter("principle", principle);
        return q;
    }
    
}
