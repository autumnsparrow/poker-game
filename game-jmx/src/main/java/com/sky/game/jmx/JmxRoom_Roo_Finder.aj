// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.sky.game.jmx;

import com.sky.game.jmx.JmxRoom;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect JmxRoom_Roo_Finder {
    
    public static Long JmxRoom.countFindJmxRoomsByChannelIdEqualsAndRoomIdEqualsAndVipNot(Long channelId, Long roomId, Boolean vip) {
        if (channelId == null) throw new IllegalArgumentException("The channelId argument is required");
        if (roomId == null) throw new IllegalArgumentException("The roomId argument is required");
        if (vip == null) throw new IllegalArgumentException("The vip argument is required");
        EntityManager em = JmxRoom.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM JmxRoom AS o WHERE o.channelId = :channelId  AND o.roomId = :roomId  AND o.vip IS NOT :vip", Long.class);
        q.setParameter("channelId", channelId);
        q.setParameter("roomId", roomId);
        q.setParameter("vip", vip);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<JmxRoom> JmxRoom.findJmxRoomsByChannelIdEqualsAndRoomIdEqualsAndVipNot(Long channelId, Long roomId, Boolean vip) {
        if (channelId == null) throw new IllegalArgumentException("The channelId argument is required");
        if (roomId == null) throw new IllegalArgumentException("The roomId argument is required");
        if (vip == null) throw new IllegalArgumentException("The vip argument is required");
        EntityManager em = JmxRoom.entityManager();
        TypedQuery<JmxRoom> q = em.createQuery("SELECT o FROM JmxRoom AS o WHERE o.channelId = :channelId  AND o.roomId = :roomId  AND o.vip IS NOT :vip", JmxRoom.class);
        q.setParameter("channelId", channelId);
        q.setParameter("roomId", roomId);
        q.setParameter("vip", vip);
        return q;
    }
    
    public static TypedQuery<JmxRoom> JmxRoom.findJmxRoomsByChannelIdEqualsAndRoomIdEqualsAndVipNot(Long channelId, Long roomId, Boolean vip, String sortFieldName, String sortOrder) {
        if (channelId == null) throw new IllegalArgumentException("The channelId argument is required");
        if (roomId == null) throw new IllegalArgumentException("The roomId argument is required");
        if (vip == null) throw new IllegalArgumentException("The vip argument is required");
        EntityManager em = JmxRoom.entityManager();
        String jpaQuery = "SELECT o FROM JmxRoom AS o WHERE o.channelId = :channelId  AND o.roomId = :roomId  AND o.vip IS NOT :vip";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<JmxRoom> q = em.createQuery(jpaQuery, JmxRoom.class);
        q.setParameter("channelId", channelId);
        q.setParameter("roomId", roomId);
        q.setParameter("vip", vip);
        return q;
    }
    
}
